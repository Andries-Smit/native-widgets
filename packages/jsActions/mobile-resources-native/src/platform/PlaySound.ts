// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import TrackPlayer, { State, Event } from "react-native-track-player";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Info about supported audio file formats:
 * - iOS: https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/SupportedAudioFormatsMacOSX/SupportedAudioFormatsMacOSX.html
 * - Android: https://developer.android.com/guide/topics/media/media-formats.html
 * @param {MxObject} audioFile - This field is required. Common supported file formats are mp3, wav, m4a, mp4.
 * @returns {Promise.<void>}
 */
export async function PlaySound(audioFile?: mendix.lib.MxObject): Promise<void> {
    // BEGIN USER CODE
    // Documentation https://react-native-track-player.js.org/

    if (!audioFile) {
        return Promise.reject(new Error("Input parameter 'Audio file' is required"));
    }

    if (!audioFile.inheritsFrom("System.FileDocument")) {
        const entity = audioFile.getEntity();
        return Promise.reject(new Error(`Entity ${entity} does not inherit from 'System.FileDocument'`));
    }

    const guid = audioFile.getGuid();
    const changedDate = audioFile.get("changedDate") as number;
    const url = mx.data.getDocumentUrl(guid, changedDate);

    try {
        // Initialize the player if it hasn't been set up yet
        const state = await TrackPlayer.getPlaybackState();
        if (state.state === State.None) {
            await TrackPlayer.setupPlayer({
                maxCacheSize: 1024
            });
        }

        // Reset the queue and add the new track
        await TrackPlayer.reset();
        await TrackPlayer.add({
            id: guid,
            url,
            title: `Audio ${guid}`,
            artist: "Mendix App"
        });

        // Play the audio
        await TrackPlayer.play();

        // Wait for playback to complete
        return new Promise<void>((resolve, reject) => {
            const subscription = TrackPlayer.addEventListener(Event.PlaybackState, event => {
                if (event.state === State.Stopped || event.state === State.Ended) {
                    subscription.remove();
                    resolve();
                } else if (event.state === State.Error) {
                    subscription.remove();
                    reject(new Error("Playback failed due to an audio encoding error"));
                }
            });
        });
    } catch (error) {
        return Promise.reject(new Error(`Failed to play audio: ${error}`));
    }

    // END USER CODE
}
