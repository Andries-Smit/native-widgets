// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Platform } from "react-native";
import notifee, { TimestampTrigger, TriggerType, AndroidChannel, AndroidImportance } from "@notifee/react-native";
// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Displays the specified notification at a future moment in time.
 *
 * Note: It is not possible to display a notification whilst the app is in the foreground on iOS 9.
 * @param {Date} date - This field is required.
 * @param {string} body - This field is required.
 * @param {string} title
 * @param {string} subtitle
 * @param {boolean} playSound
 * @param {string} notificationId - This ID can be used to cancel the scheduled notification later.
 * @param {string} actionName
 * @param {string} actionGuid
 * @returns {Promise.<void>}
 */
export async function ScheduleNotification(
    date?: Date,
    body?: string,
    title?: string,
    subtitle?: string,
    playSound?: boolean,
    notificationId?: string,
    actionName?: string,
    actionGuid?: string
): Promise<void> {
    // BEGIN USER CODE
    const channelId = "mendix-local-notifications";
    await createNotificationChannelIfNeeded(channelId);

    if (!body) {
        throw new Error("Input parameter 'Body' is required");
    }

    if (!date || !date.getTime()) {
        throw new Error("Input parameter 'Date' is required and must be a valid Date object");
    }

    const trigger: TimestampTrigger = {
        type: TriggerType.TIMESTAMP,
        timestamp: date.getTime()
    };

    const notification: any = {
        id: notificationId || undefined,
        title: title || undefined,
        body,
        android: {
            channelId,
            smallIcon: "ic_notification",
            ...(playSound ? { sound: "default" } : {})
        },
        ios: {
            ...(playSound ? { sound: "default" } : {})
        }
    };

    if (subtitle && Platform.OS === "ios") {
        notification.subtitle = subtitle;
    }

    if (actionName || actionGuid) {
        notification.data = {
            actionName: actionName || null,
            guid: actionGuid || null
        };
    }

    async function createNotificationChannelIfNeeded(channelId: string): Promise<void> {
        if (Platform.OS === "android") {
            const channels = await notifee.getChannels();
            const isChannelExist = channels.some(c => c.name === channelId);
            if (!isChannelExist) {
                const channel: AndroidChannel = {
                    id: channelId,
                    name: "Local Notifications",
                    importance: AndroidImportance.HIGH
                };
                await notifee.createChannel(channel);
            }
        }
    }

    await notifee.createTriggerNotification(notification, trigger);
    // END USER CODE
}
