diff --git a/node_modules/@mendix/pluggable-widgets-tools/bin/mx-scripts.js b/node_modules/@mendix/pluggable-widgets-tools/bin/mx-scripts.js
index 673e0b2..055f87d 100755
--- a/node_modules/@mendix/pluggable-widgets-tools/bin/mx-scripts.js
+++ b/node_modules/@mendix/pluggable-widgets-tools/bin/mx-scripts.js
@@ -107,7 +107,7 @@ function getRealCommand(cmd, toolsRoot) {
 }
 
 function findNodeModulesBin() {
-    let parentDir = join(__dirname, "..");
+    let parentDir = join(__dirname, "../..");
     const bins = [];
     while (parse(parentDir).root !== parentDir) {
         const candidate = join(parentDir, "node_modules/.bin");
diff --git a/node_modules/@mendix/pluggable-widgets-tools/test-config/transform-native.js b/node_modules/@mendix/pluggable-widgets-tools/test-config/transform-native.js
index eed8109..4b422fa 100644
--- a/node_modules/@mendix/pluggable-widgets-tools/test-config/transform-native.js
+++ b/node_modules/@mendix/pluggable-widgets-tools/test-config/transform-native.js
@@ -1,3 +1,3 @@
 module.exports = require("babel-jest").createTransformer({
-    presets: ["module:metro-react-native-babel-preset"]
+    presets: ["module:@react-native/babel-preset"]
 });
diff --git a/configs/rollup-plugin-collect-dependencies.mjs b/configs/rollup-plugin-collect-dependencies.mjs
index 2d0b5bfac7f1a1482bc1a222cba3e52b0339cc79..44ab7f4aa30abc0ba52672ea3e717f4401d00ed5 100644
--- a/configs/rollup-plugin-collect-dependencies.mjs
+++ b/configs/rollup-plugin-collect-dependencies.mjs
@@ -2,9 +2,8 @@
 
 import fg from "fast-glob";
 import fsExtra from "fs-extra";
-import { existsSync, readFileSync, writeFileSync } from "fs";
+import { existsSync, readFileSync, writeFileSync, cpSync } from "fs";
 import { dirname, join, parse } from "path";
-import copy from "recursive-copy";
 import { promisify } from "util";
 import resolve from "resolve";
 import _ from "lodash";
@@ -32,6 +31,7 @@ export function collectDependencies({
             managedDependencies.length = 0;
         },
         async resolveId(source, importer) {
+            
             // eslint-disable-next-line no-control-regex
             const sourceCleanedNullChar = source.replace(/\x00/g, "");
             if (sourceCleanedNullChar.startsWith(".") || sourceCleanedNullChar.startsWith("/")) {
@@ -42,6 +42,8 @@ export function collectDependencies({
                 dirname(importer ? importer : rollupOptions.input[0])
             );
 
+            
+
             if (resolvedPackagePath) {
                 const isNotOnlyNativeOrHasNativeCode = !onlyNative || (await hasNativeCode(resolvedPackagePath));
                 if (isNotOnlyNativeOrHasNativeCode && !managedDependencies.includes(resolvedPackagePath)) {
@@ -58,6 +60,7 @@ export function collectDependencies({
             if (!licenseOptions) {
                 return;
             }
+
             for (const dependency of dependencies) {
                 const packageJson = await scanDependency(dependency.packagePath);
                 if (packageJson) {
@@ -171,15 +174,34 @@ async function copyJsModule(moduleSourcePath, to) {
     if (existsSync(to)) {
         return;
     }
-    return promisify(copy)(moduleSourcePath, to, {
-        filter: [
-            "**/*.*",
-            LICENSE_GLOB,
-            "!**/{android,ios,windows,mac,jest,github,gradle,__*__,docs,jest,example*}/**/*",
-            "!**/*.{config,setup}.*",
-            "!**/*.{podspec,flow}"
-        ]
-    });
+    
+    try {
+        cpSync(moduleSourcePath, to, {
+            recursive: true,
+            filter: (src, dest) => {
+                const relativePath = src.replace(moduleSourcePath, '').replace(/^[\\/]/, '');
+                
+                // Skip certain directories
+                if (relativePath.match(/[\\/](android|ios|windows|mac|jest|github|gradle|__.*__|docs|example.*)[\\/]/)) {
+                    return false;
+                }
+                
+                // Skip certain file types
+                if (relativePath.match(/\.(config|setup)\.|\.podspec$|\.flow$/)) {
+                    return false;
+                }
+                
+                // Include LICENSE files
+                if (relativePath.match(/license/i)) {
+                    return true;
+                }
+                
+                return true;
+            }
+        });
+    } catch (error) {
+        throw error;
+    }
 }
 
 function getModuleName(modulePath) {